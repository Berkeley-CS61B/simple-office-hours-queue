generator client {
    provider        = "prisma-client-js"
    previewFeatures = ["referentialIntegrity"]
}

datasource db {
    provider             = "mysql"
    url                  = env("DATABASE_URL")
    referentialIntegrity = "prisma"
}

model Settings {
    setting SiteSettings       @id
    value   SiteSettingsValues
}

model ChatMessage {
    id        Int      @id @default(autoincrement())
    createdAt DateTime @default(now())
    message   String
    author    User     @relation(fields: [userId], references: [id])
    ticket    Ticket   @relation(fields: [ticketId], references: [id])

    userId   String
    ticketId Int
}

model Ticket {
    id                  Int           @id @default(autoincrement())
    createdBy           User          @relation("ticketsCreatedBy", fields: [createdByUserId], references: [id])
    helpedBy            User?         @relation("ticketsHelpedBy", fields: [helpedByUserId], references: [id])
    helpedAt            DateTime?
    resolvedAt          DateTime?
    createdAt           DateTime      @default(now())
    updatedAt           DateTime      @default(now()) @updatedAt
    status              TicketStatus  @default(PENDING)
    description         String?
    assignment          Assignment    @relation(fields: [assignmentId], references: [id])
    location            Location      @relation(fields: [locationId], references: [id])
    locationDescription String?       // ie: "Back of the room"
    resolution          String        @default("") // TODO
    staffNotes          String?
    ChatMessage         ChatMessage[]
    isPublic            Boolean       @default(false) // Can other students see/join this ticket
    usersInGroup        User[]        @relation("groupTickets")
    helpedByUserId      String?
    createdByUserId     String
    assignmentId        Int
    locationId          Int
}

model Account {
    id                String  @id @default(cuid())
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String? @db.Text
    access_token      String? @db.Text
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String? @db.Text
    session_state     String?
    user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
}

model User {
    id             String        @id @default(cuid())
    name           String?
    email          String?       @unique
    emailVerified  DateTime?
    image          String?
    role           UserRole      @default(STUDENT)
    accounts       Account[]
    sessions       Session[]
    ticketsCreated Ticket[]      @relation("ticketsCreatedBy")
    ticketsHelped  Ticket[]      @relation("ticketsHelpedBy")
    ticketsJoined  Ticket[]      @relation("groupTickets") // For public tickets
    ChatMessage    ChatMessage[]
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Assignment {
    id        Int      @id @default(autoincrement())
    name      String
    createdAt DateTime @default(now())
    updatedAt DateTime @default(now()) @updatedAt
    active    Boolean  @default(true)
    Ticket    Ticket[]
}

model Location {
    id        Int      @id @default(autoincrement())
    name      String
    createdAt DateTime @default(now())
    updatedAt DateTime @default(now()) @updatedAt
    active    Boolean  @default(true)
    Ticket    Ticket[]
}

// This is used for when users are imported. When a user signs in for the first time, 
// their entry in this table is deleted.
model ConfirmedUser {
    id    Int      @id @default(autoincrement())
    email String   @unique
    role  UserRole @default(STUDENT)

    createdAt DateTime @default(now())
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}

enum UserRole {
    STUDENT
    STAFF
    CONCIERGE
    ADMIN
}

enum TicketStatus {
    PENDING
    OPEN
    ASSIGNED
    RESOLVED
    CLOSED
}

// Default values for site settings are in utils.ts
enum SiteSettings {
    IS_PENDING_STAGE_ENABLED
    ARE_PUBLIC_TICKETS_ENABLED
    IS_QUEUE_OPEN
}

enum SiteSettingsValues {
    TRUE
    FALSE
}
